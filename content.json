{"pages":[{"title":"About","text":"关于本站此站点为基于Hexo搭建的个人博客，主题为Icarus。 IndieWeb和Fediverse数字生活方式的探索。 关于Fan票本站的部分页面会用Fan票加锁，需要在Matataki注册一个用户，持有一定量的Fan票才可以查看，用邮箱和各种钱包都能注册，并没有强制要求什么个人信息。最直接的获取Fan票的方式是在交易所直接购买，除此之外还有几种方式： 领取空投，过去的空投活动汇总可以看这里。 到Matataki Quest接任务，完成后会有Fan票奖励 在平台发表作品，接受打赏。 如果获取到的Fan票不是解锁需要的，可以去交易所兑换 Roadmap第一阶段： 在Github部署静态博客和动态博客方案相比，有几点优势： 免费 性能好。可以比较容易地得到CDN加持 一体性强，可以很容易地为生成的静态文件加上版权声明 Git的分布式版本控制。历史版本可追溯，可以比较优雅地做到多地备份 原始文件可以不用发布到Github而是保留在本地或是私有仓库。后续部署站点迁移出Github后，仍然可以上传一份生成的Blog到Github仓库，起到公示作用 生成的静态文件后续可以发布到IPFS，生成的CID可以作为签名，应用在web3生态之中 第二阶段：IndiWeb+Fediverse不依赖大平台的前提下体验足够良好的社交媒体解决方案。和直接魔改Mastodon的嘟文长度充当博客的方案相比，有以下好处： Mastodon的内容是记录在数据库的，静态博客方案可以享受到第一阶段提到的优点 书写完全可以在本地离线完成，自动保存草稿的方案也多。不太需要担心编写到一半文章丢失的问题 自定义起来比较自由，包括样式、布局，甚至可以引入script来做前端APP Hexo Blog支持生成RSS，可以用订阅同步到Mastodon Timeline上如果专门开发插件，应该可以做到在Hexo Deploy的时候把新文章发布到Mastodon Timeline上，并取得url回写到文章静态html里，形成双向链接。 第三阶段：Web3Web of trust + Fedivese Instance，凭证的签发和鉴权体系-&gt;去中心化的信任体系 Fan票锁可以做到脱离主平台，服务端直接从链上判定登入用户的Fan票持有量，决定是否开放相应权限 联合签名资格凭证发行NFT，Fedivese Instance参考NFT计算可信任程度，来作为开放权限的依据等 基于Token质押获得授权的模式 A服务提供图像社交，B服务提供数字资产化相关服务，C在A上有账号AC，并且上传了不少作品。现在C想把这些作品数字资产化，但不清楚具体要怎么做，所以搜寻合适的服务商。C根据自己的信任网络判断B服务足够可信，于是联系B，希望B能够为自己提供将作品数字资产化的服务，这时C需要向B证明帐号AC属于自己。 How? 大平台的做法一般是基于oAuth：A服务提供开发者平台，B在A服务上申请开发者帐号，创建APP，然后在自己的平台上提供基于oAuth的 Social Login with A 登录按钮；C点击登录按钮，引导到A服务提供的授权页面（如果C在A上没有登录，会先跳转到身份认证页面）,选择授权项；A服务签发对应C授权声明的accessToken给B服务，B服务可以拿着这个accessToken获取到AC帐号下的资源。 如果换成Fediverse生态，事先对接大量实例不太现实，类似IndieAuth这样输入url的方案或是基于web3直接从address找关联数据就是相当有吸引力的解决方案。 TODOGit 安装git 生成SSH Key Hexo 安装Node.js 安装Hexo 安装hexo-themes-icarus hexo-deploy-git Github 在Github上申请帐号 将SSH Key中的Public Key添加到Github上 在Github上创建仓库，存放Hexo工程文件 在Github上创建仓库，作为Blog空间 Gitea [] 搭建私有Gitea服务 [] hexo-deploy-git指向Gitea服务 [] 在Gitea服务上配置Hook，同步到Github IndieWebify 取得域名，把博客部署到个人域名下 添加IndieAuth支持 使用微格式标识Profile和Article [] 集成Webmention Fediverse 搭建Mastodon服务 将Blog的Follow指向Mastodon RelMeAuth [] 创建bot，订阅Blog的RSS，发布文章在Mastodon Timeline上发布动态，可回复、转发、点赞 Web2.x 集成Matataki Fan票插件 配置Matataki社交链接，可转账Fan票 [] 基于Matataki API的打赏Widget Web3 [] 集成web3.js [] 基于以太坊的打赏方案 [] 基于Loopss的数字身份互信方案 [] 基于钱包的权限控制","link":"/hexo-icarus-showcase/about/index.html"},{"title":"Arweave Playground","text":"Address Key Generate Save 点击[Generate]生成Arweave的Key和Address 点击[Save]会保存成一个以Address为主文件名，Key为内容的JSON文本,这个文件就可以当Arweave钱包来使用 可以用在在需要Login的Arweave APP上，一般是点击上传或者拖曳的形式，如： weavez 更多的示例可以看这里 参考： https://github.com/ArweaveTeam/arweave-js 在浏览器环境生成的钱包安全性难以保证，建议只用来体验 (() => { // Function to download data to a file function download(data, filename, type) { var file = new Blob([data], { type: type }); if (window.navigator.msSaveOrOpenBlob) // IE10+ window.navigator.msSaveOrOpenBlob(file, filename); else { // Others var a = document.createElement(\"a\"), url = URL.createObjectURL(file); a.href = url; a.download = filename; document.body.appendChild(a); a.click(); setTimeout(function () { document.body.removeChild(a); window.URL.revokeObjectURL(url); }, 0); } } const arweave = Arweave.init({ host: 'arweave.arcucy.io', port: 443, protocol: 'https', timeout: 20000, logging: false }); arweave.network.getInfo().then(console.log); let info = {}; window.addEventListener('load', () => { document.getElementById('arweave_playground_generate_key_btn').onclick = () => { arweave.wallets.generate().then((key) => { info.key = key; document.getElementById('arweave_playground_key').innerText = JSON.stringify(key); return arweave.wallets.jwkToAddress(key); }).then((address) => { info.address = address; document.getElementById('arweave_playground_address').value = address; }); }; document.getElementById('arweave_playground_generate_save_btn').onclick = () => { if (info.key && info.address) { download(JSON.stringify(info.key), info.address + '.json', 'application/json'); } }; }); })();","link":"/hexo-icarus-showcase/arweave/playground.html"},{"title":"W3 RSSHub","text":"W3 RSSHub 实验性的 RSSHub 私服，用于尝试对接各种 Web3 生态 目前制作的数据源 瞬 Matataki 平台 / IPFS 上的文章 Loopss 订阅链上 Social Message ArcLight 订阅存储在 Arweave 上的声音，包括单曲、专辑、播客、声效","link":"/hexo-icarus-showcase/w3-rsshub/index.html"},{"title":"Zora 项目分析备忘","text":"开发语言： Typescript 项目主要分为三个部分： Core: 正如其名，核心部分，包括了 Zora 的智能合约 ZDK cli： 开发者工具包和命令行工具。 第三方项目用这个就能和现成的 Zora 智能合约集成了 Zora V1 Subgraph: 这个是需要跑后端服务的，基于 The Grapth 的索引服务，构建 GraphQL API 查询以太坊和 IPFS 链上的信息 https://zora.co/ 这样面向终端用户的站点服务本身看来是属于还没有开源的部分，不过可以看出来是靠上面三大部分支撑的 还有一些外围 Media Metadata Schemas 协议本身不检查 metadata, 可以自行定义新的 Metadata Schema 来满足自己项目的需要 Core 开发环境 Hardhat 测试框架 Chai 以太坊集成方案 TypeChain 领域建模看起来是按照 Cryptomedia = [Hypermedia + Creator + Owner + Market] = Value^1 的理念设计的 Creator Owner 基本就是直接靠 ERC721 标准解决的，在此基础上增加了对 tokenContent 和 tokenMetadata 的 Hash 和 URI 形成 Media，再将一个 Market 关联上来，我们看到的 Zora NFT 就对应其 Media 智能合约 Media Market Bid Ask BidShares tokenOwner (ERC721 定义) tokenCreator previousTokenOwner tokenContentHash tokenURI (ERC721 定义) tokenMetadataHash tokenMetadataURI 标记了 ERC721 定义 以外的就是 Zora 追加的。大写字母开始的都是一种结构体，靠typechain生成的对应的ts文件 主要开发/构建命令The following assumes node &gt;= 12 Install Dependenciesscript1yarn Compile Contractsscript1yarn build Start a Local Blockchainscript1yarn chain Run Testsscript1yarn test ZDK理所当然地，依赖上面的 Core。在这个库里以 Typescript 的形式定义了对应智能合约领域模型的类，包括Zora BidShares Ask Bid MediaData EIP712Signature EIP712Domain, 还有配套的 Metadata Decimal Address 相关的生成、解析、校验\\转换工具 测试框架 Jest CLI用这个是可以比较容易地体验铸币的感觉的 rinkeby script1234567zora mint uri --rpc-url &lt;infura or alchemy node&gt; \\--wallet-mnemonic 'concert load couple harbor equip island argue ramp clarify fence smart topic' \\--chain-id 4 \\--content-uri https://ipfs.io/ipfs/bafybeiacyrrjel6qq2mdv6to6fvbzsg64y3g4kbp32h55zfmesx2oe7cwi \\--metadata-uri https://ipfs.io/ipfs/bafybeifvmzeyggdi36igqjiub5bq6vbpn5ebihxgqjbrk5ibqculk4upoy \\--creator-share 10 \\--timeout 10000 刚好 Matataki 主站也在 Rinkeby 测试链上， content-uri 已经具备，做好一个metadata 上传 IPFS 就可以得到 metadata-uri 当然不做任何改造用这个调到的智能合约就是官方的了, 实验还是没问题的 Zora V1 Subgraph简单来说就是搜索服务 GraphQL Query API Fleek IPFS pinning service The Graph Blockchain Indexer Postgresql 制作实验在 Rinkeby 上 Creator 地址 0xbc820824caef8ac41afbaf8f286dd7796e478827 tokenURI metadataURI Successfully submitted Mint Transaction to the Zora Media Contract.Contract Address: 0x7C2668BD0D3c050703CEcC956C11Bd520c26f7d4.ChainId 4.Transaction Hash: 0x8da9696ae7487d5570f7830ada224ed42a067b910769de4c5699a1c5cab23d06. 区块链浏览器中查看Zora Media 智能合约 用 balanceOf 可以确认到指定地址拥有的 ZORA 的 总数用 tokenOfOwnerByIndex 可以确认到指定地址拥有的 各个 ZORA 的 TokenID 二者结合是可以遍历出个人持有的各个 ZORA Token的 TokenID，进一步拿到 tokenURI 和 metadataURI 写方面可以用 setAsk 报价 1{amount:1000000,currency:&quot;0x280Be10b609F95f70E82c0D7151543f59102f47D&quot;} 指定 岛岛币在 Rinkeby 上的地址来报个卖家价格 成功执行事务了 https://rinkeby.etherscan.io/tx/0x7d1afd67e88004eb728efdbecb4de080c7a4f6c634ef8bf623de37a24ea42ed0 区块链浏览器中查看Zora Token Overview-&gt;Input Data:| # | Name | Type | Data || - | —- | —- | —- || 0 | data.tokenURI | string | https://arweave.net/cgcaeQKCzbbY5bOAdZgkUiS2_HVrLGUTLtw7z4YmXzA || 0 | data.metadataURI | string |https://arweave.net/w7y5m68ApWWBT2b-v1orK1HC550_1ILFP5Z6g-IYLsk || 0 | data.contentHash | bytes32 | 0x43811d3168b5109c9b6497b574e670a24191db9463065fe8a1cd79f7550d3259 || 0 | data.metadataHash | bytes32 | 0x6546bae0a94664535b214df342ab8008d9549e2e0c1d1f886dbd1f6d180e7467 | 可以确认到我们的两个链接 区块链浏览器中查看Zora Market Media 和 Market 两个协议是有互指的. 从具体的 Hash 找到 一个还是比较容易的，这个在客户端保存亦可。或者存到社交消息上亦可。 Market 的 Ask 和 Bid 只能 从 Media 去调用，会检查。 从 currentAskForToken 输入之前做的NFT的 tokenID 可以看到之前 setAsk的报价信息 bidShares 结构 1{creator: {value:15},owner: {value:80},prevOwner: {value:5}} setBid 1{amount:900000,currency:&quot;0x280Be10b609F95f70E82c0D7151543f59102f47D&quot;, bidder:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,recipient:&quot;0x7c2668bd0d3c050703cecc956c11bd520c26f7d4&quot;,sellOnShare:{value:20}} 先换成其他 Fan 票 测试 用 Care 测试 换了多个 recipient 测试, 也就是说 “可以买给别的地址”, 买单的是 bidder,这里就买给自己 1{amount:1,currency:&quot;0x0c064faD09Ef700F9087B9ca47867ac24fdAD2f3&quot;, bidder:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,recipient:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,sellOnShare:{value:1}} 这样依然会失败 从安全性角度来说，还要去 Fan票 合约那边 approve ，否则无法支付 简单来说 ERC20 transferFrom 的条件无法满足 123456789function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); uint256 currentAllowance = _allowances[sender][_msgSender()]; require(currentAllowance &gt;= amount, &quot;ERC20: transfer amount exceeds allowance&quot;); _approve(sender, _msgSender(), currentAllowance - amount); return true; } 在 Zora 的合约里就是这 Market.sol1234567 IERC20 token = IERC20(bid.currency);// We must check the balance that was actually transferred to the market, // as some tokens impose a transfer fee and would not actually transfer the // full amount to the market, resulting in locked funds for refunds &amp; bid acceptance uint256 beforeBalance = token.balanceOf(address(this)); token.safeTransferFrom(spender, address(this), bid.amount); uint256 afterBalance = token.balanceOf(address(this)); token.safeTransferFrom(spender, address(this), bid.amount); 这个要成功需要 先在 Fan 票的合约里 approve 给 spender （Market 合约地址） 都准备好之后重新从 setAsk 开始 1{amount:100,currency:&quot;0x0c064faD09Ef700F9087B9ca47867ac24fdAD2f3&quot;} setBid 1{amount:1,currency:&quot;0x0c064faD09Ef700F9087B9ca47867ac24fdAD2f3&quot;, bidder:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,recipient:&quot;0x7c2668bd0d3c050703cecc956c11bd520c26f7d4&quot;,sellOnShare:{value:1}} 事务可以完成确认了。Care会转给这个地址： 0x85e946e1Bd35EC91044Dc83A5DdAB2B6A262ffA6 也就是 Market 接着报价 1{amount:100,currency:&quot;0x0c064faD09Ef700F9087B9ca47867ac24fdAD2f3&quot;, bidder:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,recipient:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,sellOnShare:{value:20}} 这样交易就完成了，自动撮合逻辑对应合约里的这部分 12345678910// If a bid meets the criteria for an ask, automatically accept the bid.// If no ask is set or the bid does not meet the requirements, ignore.if ( _tokenAsks[tokenId].currency != address(0) &amp;&amp; bid.currency == _tokenAsks[tokenId].currency &amp;&amp; bid.amount &gt;= _tokenAsks[tokenId].amount) { // Finalize exchange _finalizeNFTTransfer(tokenId, bid.bidder);} currency 对得上， amount超过当前ask的，满足条件 依然可以继续 setBid因为 approve 的没有那么多，所以出大的amount会失败 1{amount:20000,currency:&quot;0x0c064faD09Ef700F9087B9ca47867ac24fdAD2f3&quot;, bidder:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,recipient:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,sellOnShare:{value:20}} 一次1，一次100，之前 approve 了10000，所以现在最多报价到9899 1{amount:9899,currency:&quot;0x0c064faD09Ef700F9087B9ca47867ac24fdAD2f3&quot;, bidder:&quot;0x9FD9685148f62833A0c868D65B83AC04C5B43081&quot;,recipient:&quot;0x7c2668bd0d3c050703cecc956c11bd520c26f7d4&quot;,sellOnShare:{value:10}} 这个是可以成功的 不过之前设置的Share非常小，只有 20， 无论是做 setAsk 还是 acceptBid 都无法满足那个比例 Fail with error ‘Market: Ask invalid for share splitting’ 因为目前 BidShares 是这种数字，之前设置的位数不对 preOwner: 20creator: 10000000000000000000owner: 89999999999999999980 另外交易过程中注意 Market 0x85e946e1Bd35EC91044Dc83A5DdAB2B6A262ffA6 的 allowance 变化，用完了需要重新去 approve 才能继续回来 setBid 先测试到这里，可以去各自合约里确认这笔交易，也能看到 NFT 的 owner 发生变化了","link":"/hexo-icarus-showcase/zora-memo/index.html"},{"title":"CHAPTER IV. The Rabbit Sends in a Little Bill","text":"此文是在 Matataki 站外 Blog 连载文章的样章，摸索各种玩法，展示各种可能性。 使用已是公共版权的 刘易斯·卡罗尔的《爱丽丝漫游奇境》来演示。 来源：http://www.gutenberg.org/files/11/11-h/11-h.htm#chap04 本文演示了在 Hexo Blog 使用 Fan票 锁的方法。目前站外 Fan 票 锁是针对整个页面的，如果有需要拆分多个部分上锁可以像连载一样分出多个章节来分别上锁 目录 第一章 第二章 第三章 第四章 It was the White Rabbit, trotting slowly back again, and looking anxiously about as it went, as if it had lost something; and she heard it muttering to itself “The Duchess! The Duchess! Oh my dear paws! Oh my fur and whiskers! She’ll get me executed, as sure as ferrets are ferrets! Where can I have dropped them, I wonder?” Alice guessed in a moment that it was looking for the fan and the pair of white kid gloves, and she very good-naturedly began hunting about for them, but they were nowhere to be seen—everything seemed to have changed since her swim in the pool, and the great hall, with the glass table and the little door, had vanished completely. Very soon the Rabbit noticed Alice, as she went hunting about, and called out to her in an angry tone, “Why, Mary Ann, what are you doing out here? Run home this moment, and fetch me a pair of gloves and a fan! Quick, now!” And Alice was so much frightened that she ran off at once in the direction it pointed to, without trying to explain the mistake it had made. “He took me for his housemaid,” she said to herself as she ran. “How surprised he’ll be when he finds out who I am! But I’d better take him his fan and gloves—that is, if I can find them.” As she said this, she came upon a neat little house, on the door of which was a bright brass plate with the name “W. RABBIT,” engraved upon it. She went in without knocking, and hurried upstairs, in great fear lest she should meet the real Mary Ann, and be turned out of the house before she had found the fan and gloves. “How queer it seems,” Alice said to herself, “to be going messages for a rabbit! I suppose Dinah’ll be sending me on messages next!” And she began fancying the sort of thing that would happen: “‘Miss Alice! Come here directly, and get ready for your walk!’ ‘Coming in a minute, nurse! But I’ve got to see that the mouse doesn’t get out.’ Only I don’t think,” Alice went on, “that they’d let Dinah stop in the house if it began ordering people about like that!” By this time she had found her way into a tidy little room with a table in the window, and on it (as she had hoped) a fan and two or three pairs of tiny white kid gloves: she took up the fan and a pair of the gloves, and was just going to leave the room, when her eye fell upon a little bottle that stood near the looking-glass. There was no label this time with the words “DRINK ME,” but nevertheless she uncorked it and put it to her lips. “I know something interesting is sure to happen,” she said to herself, “whenever I eat or drink anything; so I’ll just see what this bottle does. I do hope it’ll make me grow large again, for really I’m quite tired of being such a tiny little thing!” It did so indeed, and much sooner than she had expected: before she had drunk half the bottle, she found her head pressing against the ceiling, and had to stoop to save her neck from being broken. She hastily put down the bottle, saying to herself “That’s quite enough—I hope I shan’t grow any more—As it is, I can’t get out at the door—I do wish I hadn’t drunk quite so much!” Alas! it was too late to wish that! She went on growing, and growing, and very soon had to kneel down on the floor: in another minute there was not even room for this, and she tried the effect of lying down with one elbow against the door, and the other arm curled round her head. Still she went on growing, and, as a last resource, she put one arm out of the window, and one foot up the chimney, and said to herself “Now I can do no more, whatever happens. What will become of me?” Luckily for Alice, the little magic bottle had now had its full effect, and she grew no larger: still it was very uncomfortable, and, as there seemed to be no sort of chance of her ever getting out of the room again, no wonder she felt unhappy. “It was much pleasanter at home,” thought poor Alice, “when one wasn’t always growing larger and smaller, and being ordered about by mice and rabbits. I almost wish I hadn’t gone down that rabbit-hole—and yet—and yet—it’s rather curious, you know, this sort of life! I do wonder what can have happened to me! When I used to read fairy-tales, I fancied that kind of thing never happened, and now here I am in the middle of one! There ought to be a book written about me, that there ought! And when I grow up, I’ll write one—but I’m grown up now,” she added in a sorrowful tone; “at least there’s no room to grow up any more here.” “But then,” thought Alice, “shall I never get any older than I am now? That’ll be a comfort, one way—never to be an old woman—but then—always to have lessons to learn! Oh, I shouldn’t like that!” “Oh, you foolish Alice!” she answered herself. “How can you learn lessons in here? Why, there’s hardly room for you, and no room at all for any lesson-books!” And so she went on, taking first one side and then the other, and making quite a conversation of it altogether; but after a few minutes she heard a voice outside, and stopped to listen. “Mary Ann! Mary Ann!” said the voice. “Fetch me my gloves this moment!” Then came a little pattering of feet on the stairs. Alice knew it was the Rabbit coming to look for her, and she trembled till she shook the house, quite forgetting that she was now about a thousand times as large as the Rabbit, and had no reason to be afraid of it. Presently the Rabbit came up to the door, and tried to open it; but, as the door opened inwards, and Alice’s elbow was pressed hard against it, that attempt proved a failure. Alice heard it say to itself “Then I’ll go round and get in at the window.” “That you won’t!” thought Alice, and, after waiting till she fancied she heard the Rabbit just under the window, she suddenly spread out her hand, and made a snatch in the air. She did not get hold of anything, but she heard a little shriek and a fall, and a crash of broken glass, from which she concluded that it was just possible it had fallen into a cucumber-frame, or something of the sort. Next came an angry voice—the Rabbit’s—“Pat! Pat! Where are you?” And then a voice she had never heard before, “Sure then I’m here! Digging for apples, yer honour!” “Digging for apples, indeed!” said the Rabbit angrily. “Here! Come and help me out of this!” (Sounds of more broken glass.) “Now tell me, Pat, what’s that in the window?” “Sure, it’s an arm, yer honour!” (He pronounced it “arrum.”) “An arm, you goose! Who ever saw one that size? Why, it fills the whole window!” “Sure, it does, yer honour: but it’s an arm for all that.” “Well, it’s got no business there, at any rate: go and take it away!” There was a long silence after this, and Alice could only hear whispers now and then; such as, “Sure, I don’t like it, yer honour, at all, at all!” “Do as I tell you, you coward!” and at last she spread out her hand again, and made another snatch in the air. This time there were two little shrieks, and more sounds of broken glass. “What a number of cucumber-frames there must be!” thought Alice. “I wonder what they’ll do next! As for pulling me out of the window, I only wish they could! I’m sure I don’t want to stay in here any longer!” She waited for some time without hearing anything more: at last came a rumbling of little cartwheels, and the sound of a good many voices all talking together: she made out the words: “Where’s the other ladder?—Why, I hadn’t to bring but one; Bill’s got the other—Bill! fetch it here, lad!—Here, put ’em up at this corner—No, tie ’em together first—they don’t reach half high enough yet—Oh! they’ll do well enough; don’t be particular—Here, Bill! catch hold of this rope—Will the roof bear?—Mind that loose slate—Oh, it’s coming down! Heads below!” (a loud crash)—“Now, who did that?—It was Bill, I fancy—Who’s to go down the chimney?—Nay, I shan’t! You do it!—That I won’t, then!—Bill’s to go down—Here, Bill! the master says you’re to go down the chimney!” “Oh! So Bill’s got to come down the chimney, has he?” said Alice to herself. “Shy, they seem to put everything upon Bill! I wouldn’t be in Bill’s place for a good deal: this fireplace is narrow, to be sure; but I think I can kick a little!” She drew her foot as far down the chimney as she could, and waited till she heard a little animal (she couldn’t guess of what sort it was) scratching and scrambling about in the chimney close above her: then, saying to herself “This is Bill,” she gave one sharp kick, and waited to see what would happen next. The first thing she heard was a general chorus of “There goes Bill!” then the Rabbit’s voice along—“Catch him, you by the hedge!” then silence, and then another confusion of voices—“Hold up his head—Brandy now—Don’t choke him—How was it, old fellow? What happened to you? Tell us all about it!” Last came a little feeble, squeaking voice, (“That’s Bill,” thought Alice,) “Well, I hardly know—No more, thank ye; I’m better now—but I’m a deal too flustered to tell you—all I know is, something comes at me like a Jack-in-the-box, and up I goes like a sky-rocket!” “So you did, old fellow!” said the others. “We must burn the house down!” said the Rabbit’s voice; and Alice called out as loud as she could, “If you do, I’ll set Dinah at you!” There was a dead silence instantly, and Alice thought to herself, “I wonder what they will do next! If they had any sense, they’d take the roof off.” After a minute or two, they began moving about again, and Alice heard the Rabbit say, “A barrowful will do, to begin with.” “A barrowful of what?” thought Alice; but she had not long to doubt, for the next moment a shower of little pebbles came rattling in at the window, and some of them hit her in the face. “I’ll put a stop to this,” she said to herself, and shouted out, “You’d better not do that again!” which produced another dead silence. Alice noticed with some surprise that the pebbles were all turning into little cakes as they lay on the floor, and a bright idea came into her head. “If I eat one of these cakes,” she thought, “it’s sure to make some change in my size; and as it can’t possibly make me larger, it must make me smaller, I suppose.” So she swallowed one of the cakes, and was delighted to find that she began shrinking directly. As soon as she was small enough to get through the door, she ran out of the house, and found quite a crowd of little animals and birds waiting outside. The poor little Lizard, Bill, was in the middle, being held up by two guinea-pigs, who were giving it something out of a bottle. They all made a rush at Alice the moment she appeared; but she ran off as hard as she could, and soon found herself safe in a thick wood. “The first thing I’ve got to do,” said Alice to herself, as she wandered about in the wood, “is to grow to my right size again; and the second thing is to find my way into that lovely garden. I think that will be the best plan.” It sounded an excellent plan, no doubt, and very neatly and simply arranged; the only difficulty was, that she had not the smallest idea how to set about it; and while she was peering about anxiously among the trees, a little sharp bark just over her head made her look up in a great hurry. An enormous puppy was looking down at her with large round eyes, and feebly stretching out one paw, trying to touch her. “Poor little thing!” said Alice, in a coaxing tone, and she tried hard to whistle to it; but she was terribly frightened all the time at the thought that it might be hungry, in which case it would be very likely to eat her up in spite of all her coaxing. Hardly knowing what she did, she picked up a little bit of stick, and held it out to the puppy; whereupon the puppy jumped into the air off all its feet at once, with a yelp of delight, and rushed at the stick, and made believe to worry it; then Alice dodged behind a great thistle, to keep herself from being run over; and the moment she appeared on the other side, the puppy made another rush at the stick, and tumbled head over heels in its hurry to get hold of it; then Alice, thinking it was very like having a game of play with a cart-horse, and expecting every moment to be trampled under its feet, ran round the thistle again; then the puppy began a series of short charges at the stick, running a very little way forwards each time and a long way back, and barking hoarsely all the while, till at last it sat down a good way off, panting, with its tongue hanging out of its mouth, and its great eyes half shut. This seemed to Alice a good opportunity for making her escape; so she set off at once, and ran till she was quite tired and out of breath, and till the puppy’s bark sounded quite faint in the distance. “And yet what a dear little puppy it was!” said Alice, as she leant against a buttercup to rest herself, and fanned herself with one of the leaves: “I should have liked teaching it tricks very much, if—if I’d only been the right size to do it! Oh dear! I’d nearly forgotten that I’ve got to grow up again! Let me see—how is it to be managed? I suppose I ought to eat or drink something or other; but the great question is, what?” The great question certainly was, what? Alice looked all round her at the flowers and the blades of grass, but she did not see anything that looked like the right thing to eat or drink under the circumstances. There was a large mushroom growing near her, about the same height as herself; and when she had looked under it, and on both sides of it, and behind it, it occurred to her that she might as well look and see what was on the top of it. She stretched herself up on tiptoe, and peeped over the edge of the mushroom, and her eyes immediately met those of a large blue caterpillar, that was sitting on the top with its arms folded, quietly smoking a long hookah, and taking not the smallest notice of her or of anything else.","link":"/hexo-icarus-showcase/chapter-4-the-rabbit-sends-in-a-little-bill/index.html"}],"posts":[{"title":"Mastodon Integration","text":"(RSS-&gt;Mastodon)-&gt;Webmention-&gt;Share 思路为每一篇博文生成一个对应的Toot，并把Toot链接回链到博文上，形成双向链接，以Toot接入Fediverse；前者有web规范，以前有linkback，pingback等，这里用Indiweb推荐的Webmention形式 步骤 用hexo生成atom.xml文件，即Blog文章的订阅源 用Huginn/IFTTT/自定义bot订阅1的RSS源，对每一条目调用Mastodon API, POST Statuses，content为我发布了博客文章： {title} {url} 取2的response body，解析为JSON对象，取其id，即为toot的id 调用telegraph API， source为3中返回的id拼装出的url https://{mastodonDomain}/interact/{statusId}?type=reply,target为RSS每个条目的url telegraph会把这个消息发送给对应的webmention server 在Blog模板添加“分享”脚本，调用webmention API，获取页面收到的webmention 过滤5中获取的webmention，过滤出由自己mastodon实例发出的webmention（根据域名和作者）6-1. 取webmention的url，即第4步拼装出的url，把url设置到【回复】链接上；6-2. 把type=reply替换成type=reblog,把url设置到【转嘟】链接上6-3. 把type=reply替换成type=favourite，设置到【喜欢】链接上","link":"/hexo-icarus-showcase/2021/01/31/Mastodon-Integration/"},{"title":"Alice in Wonderland","text":"The rabbit-hole went straight on like a tunnel for some way, and then dipped suddenly down, so suddenly that Alice had not a moment to think about stopping herself before she found herself falling down a very deep well. Either the well was very deep, or she fell very slowly, for she had plenty of time as she went down to look about her and to wonder what was going to happen next. First, she tried to look down and make out what she was coming to, but it was too dark to see anything; then she looked at the sides of the well, and noticed that they were filled with cupboards and book-shelves; here and there she saw maps and pictures hung upon pegs. She took down a jar from one of the shelves as she passed; it was labelled ‘ORANGE MARMALADE’, but to her great disappointment it was empty: she did not like to drop the jar for fear of killing somebody, so managed to put it into one of the cupboards as she fell past it. ‘Well!’ thought Alice to herself, ‘after such a fall as this, I shall think nothing of tumbling down stairs! How brave they’ll all think me at home! Why, I wouldn’t say anything about it, even if I fell off the top of the house!’ (Which was very likely true.) Down, down, down. Would the fall NEVER come to an end! ‘I wonder how many miles I’ve fallen by this time?’ she said aloud. ‘I must be getting somewhere near the centre of the earth. Let me see: that would be four thousand miles down, I think&mdash;’ (for, you see, Alice had learnt several things of this sort in her lessons in the schoolroom, and though this was not a VERY good opportunity for showing off her knowledge, as there was no one to listen to her, still it was good practice to say it over) ‘&mdash;yes, that’s about the right distance&mdash;but then I wonder what Latitude or Longitude I’ve got to?’ (Alice had no idea what Latitude was, or Longitude either, but thought they were nice grand words to say.) Presently she began again. ‘I wonder if I shall fall right THROUGH the earth! How funny it’ll seem to come out among the people that walk with their heads downward! The Antipathies, I think&mdash;’ (she was rather glad there WAS no one listening, this time, as it didn’t sound at all the right word) ‘&mdash;but I shall have to ask them what the name of the country is, you know. Please, Ma’am, is this New Zealand or Australia?’ (and she tried to curtsey as she spoke&mdash;fancy CURTSEYING as you’re falling through the air! Do you think you could manage it?) ‘And what an ignorant little girl she’ll think me for asking! No, it’ll never do to ask: perhaps I shall see it written up somewhere.’ Down, down, down. There was nothing else to do, so Alice soon began talking again. ‘Dinah’ll miss me very much to-night, I should think!’ (Dinah was the cat.) ‘I hope they’ll remember her saucer of milk at tea-time. Dinah my dear! I wish you were down here with me! There are no mice in the air, I’m afraid, but you might catch a bat, and that’s very like a mouse, you know. But do cats eat bats, I wonder?’ And here Alice began to get rather sleepy, and went on saying to herself, in a dreamy sort of way, ‘Do cats eat bats? Do cats eat bats?’ and sometimes, ‘Do bats eat cats?’ for, you see, as she couldn’t answer either question, it didn’t much matter which way she put it. She felt that she was dozing off, and had just begun to dream that she was walking hand in hand with Dinah, and saying to her very earnestly, ‘Now, Dinah, tell me the truth: did you ever eat a bat?’ when suddenly, thump! thump! down she came upon a heap of sticks and dry leaves, and the fall was over. Alice was not a bit hurt, and she jumped up on to her feet in a moment: she looked up, but it was all dark overhead; before her was another long passage, and the White Rabbit was still in sight, hurrying down it. There was not a moment to be lost: away went Alice like the wind, and was just in time to hear it say, as it turned a corner, 'Oh my ears and whiskers, how late it's getting!' She was close behind it when she turned the corner, but the Rabbit was no longer to be seen: she found herself in a long, low hall, which was lit up by a row of lamps hanging from the roof. There were doors all round the hall, but they were all locked; and when Alice had been all the way down one side and up the other, trying every door, she walked sadly down the middle, wondering how she was ever to get out again. Source: https://www.cs.cmu.edu/~rgs/alice-I.html Placeholder text by Fillerati. Photography by UNSPLASH.","link":"/hexo-icarus-showcase/2016/03/25/alice-in-wonderland/"},{"title":"嵌入APlayer播放器示例","text":"","link":"/hexo-icarus-showcase/2020/11/11/aplayer-demo/"},{"title":"独立Blog+Mastodon个人笔记","text":"基本思路基本流程参照现成的教程就可以了，各种服务尽量选用粘性小的。越是要求大量个人信息、越是用大量脚本跟踪行为分析的就越粘。大量参考 IndieWeb社会 的选型 服务选型邮箱 Prontonmail 域名提供商 Namecheap Freenom 在这里可以找到免费使用1年的域名，还没实际试过，可以尝试 BlogHexo生态足够好，静态站点能部署在很多地方 托管 Github。 可以用 hexo-deploy-sftp 先从这里开始，积累足够经验之后可以参考其他方案。 自己建站的 VPS。可以用 hexo-deploy-sftp 等插件来发布 IPFS。可以用hexo-deploy-ipfs 插件来发布 Arweave。用 hexo g 生成 public 目录， 用 arweave-deploy 来发布。需要一定的 AR 。参考 Arweave 储存网站 WordPress动态 Blog 方案中这个应该是最流行的了，生态也是非常强大，有服务端可以很简单地做资源的动态权限控制。 由于有后端，在探索 Web3 方面会有对客户来说是黑盒的部分，需要信任网络支持。 不过，独立个站 + Web 基建 本来就符合去中心化的宗旨， 信任线上身份和信任 Blog 是相辅相成的。 Web3 部分起到 Web2 中经济的那一部分也能发挥巨大作用， 简单理解就是让创作者得到回报、生态成长的机制。 BotHuginn目前在用的方案。理论上不需要会编程，但是要自定义场景还是需要熟悉各种基本概念。不过编写好之后可以分享，这种情况下直接用别人写好的场景配置替换关键的KEY就可以了。 试用阶段这样就可以了。用久了数据不好管理就是 1docker run -it -p 3000:3000 huginn/huginn 有个数据卷至少可以备份了 1docker run -it -p 3000:3000 -v /home/huginn/mysql-data:/var/lib/mysql huginn/huginn 分拆两个容器管理起来会正规不少 12345678910111213docker run --rm --name huginn_mysql \\ -e MYSQL_DATABASE=huginn \\ -e MYSQL_USER=huginn \\ -e MYSQL_PASSWORD=somethingsecret \\ -e MYSQL_ROOT_PASSWORD=somethingevenmoresecret \\ mysqldocker run --rm --name huginn \\ --link huginn_mysql:mysql \\ -p 3000:3000 \\ -e HUGINN_DATABASE_NAME=huginn \\ -e HUGINN_DATABASE_USERNAME=huginn \\ -e HUGINN_DATABASE_PASSWORD=somethingsecret \\ huginn/huginn 订阅博客发送嘟文并发送 webmention 的配置如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133{ &quot;schema_version&quot;: 1, &quot;name&quot;: &quot;blog2toot+webmention&quot;, &quot;description&quot;: &quot;No description provided&quot;, &quot;source_url&quot;: false, &quot;guid&quot;: &quot;daf1ad9a561dfff6d09e15d610e081b2&quot;, &quot;tag_fg_color&quot;: &quot;#ffffff&quot;, &quot;tag_bg_color&quot;: &quot;#5bc0de&quot;, &quot;icon&quot;: &quot;gear&quot;, &quot;exported_at&quot;: &quot;2021-03-09T06:53:33Z&quot;, &quot;agents&quot;: [ { &quot;type&quot;: &quot;Agents::JsonParseAgent&quot;, &quot;name&quot;: &quot;parse-mastodon-status-response&quot;, &quot;disabled&quot;: false, &quot;guid&quot;: &quot;51b17c5aa5cf78e22edbe8d2d40776be&quot;, &quot;options&quot;: { &quot;data&quot;: &quot;{{ body }}&quot;, &quot;data_key&quot;: &quot;mastodonResponse&quot;, &quot;mode&quot;: &quot;merge&quot; }, &quot;keep_events_for&quot;: 0, &quot;propagate_immediately&quot;: false }, { &quot;type&quot;: &quot;Agents::DataOutputAgent&quot;, &quot;name&quot;: &quot;generate-blog-mastodon-link-rss&quot;, &quot;disabled&quot;: false, &quot;guid&quot;: &quot;6dce7c9785814969d3a727c753a4ae18&quot;, &quot;options&quot;: { &quot;secrets&quot;: [ &quot;link-mapping&quot; ], &quot;expected_receive_period_in_days&quot;: 2, &quot;template&quot;: { &quot;title&quot;: &quot;blog-mastodon-links&quot;, &quot;description&quot;: &quot;links&quot;, &quot;item&quot;: { &quot;title&quot;: &quot;{{mastodonResponse.id}}&quot;, &quot;description&quot;: &quot;{{mastodonResponse.content}}&quot;, &quot;link&quot;: &quot;{{url}}&quot; } }, &quot;ns_media&quot;: &quot;true&quot; }, &quot;propagate_immediately&quot;: false }, { &quot;type&quot;: &quot;Agents::PostAgent&quot;, &quot;name&quot;: &quot;send-mastodon-webmention-to-blog&quot;, &quot;disabled&quot;: false, &quot;guid&quot;: &quot;81a44c52bc5ead38491a061acd35295d&quot;, &quot;options&quot;: { &quot;post_url&quot;: &quot;https://telegraph.p3k.io/webmention&quot;, &quot;expected_receive_period_in_days&quot;: &quot;1&quot;, &quot;content_type&quot;: &quot;form&quot;, &quot;method&quot;: &quot;post&quot;, &quot;payload&quot;: { &quot;source&quot;: &quot;https://YOUR_MASTODON_DOMAIN/interact/{{mastodonResponse.id}}?type=reply&quot;, &quot;target&quot;: &quot;{{url}}&quot;, &quot;token&quot;: &quot;YOUR_TELEGRAPH_TOKEN&quot; }, &quot;headers&quot;: { }, &quot;emit_events&quot;: &quot;true&quot;, &quot;no_merge&quot;: &quot;false&quot;, &quot;output_mode&quot;: &quot;merge&quot; }, &quot;schedule&quot;: &quot;never&quot;, &quot;keep_events_for&quot;: 0, &quot;propagate_immediately&quot;: true }, { &quot;type&quot;: &quot;Agents::PostAgent&quot;, &quot;name&quot;: &quot;post-blog-link-to-mastodon&quot;, &quot;disabled&quot;: false, &quot;guid&quot;: &quot;8600d78626699e2e893aae0e5d92f3f5&quot;, &quot;options&quot;: { &quot;post_url&quot;: &quot;https://YOUR_MASTODON_DOMAIN/api/v1/statuses&quot;, &quot;expected_receive_period_in_days&quot;: &quot;1&quot;, &quot;content_type&quot;: &quot;json&quot;, &quot;method&quot;: &quot;post&quot;, &quot;payload&quot;: { &quot;status&quot;: &quot;我发表了博客文章： {{title}} {{url}}&quot;, &quot;visibility&quot;: &quot;public&quot; }, &quot;headers&quot;: { &quot;Authorization&quot;: &quot;Bearer YOUR_MASTODON_TOKEN&quot; }, &quot;emit_events&quot;: &quot;true&quot;, &quot;no_merge&quot;: &quot;false&quot;, &quot;output_mode&quot;: &quot;merge&quot; }, &quot;schedule&quot;: &quot;never&quot;, &quot;keep_events_for&quot;: 0, &quot;propagate_immediately&quot;: false }, { &quot;type&quot;: &quot;Agents::RssAgent&quot;, &quot;name&quot;: &quot;fetch-blog-rss-feed&quot;, &quot;disabled&quot;: false, &quot;guid&quot;: &quot;d6a2c7990ff91071302cb204a0df2b98&quot;, &quot;options&quot;: { &quot;expected_update_period_in_days&quot;: &quot;5&quot;, &quot;clean&quot;: &quot;false&quot;, &quot;url&quot;: &quot;YOUR_BLOG_FEED_URL&quot; }, &quot;schedule&quot;: &quot;every_10m&quot;, &quot;keep_events_for&quot;: 0 } ], &quot;links&quot;: [ { &quot;source&quot;: 0, &quot;receiver&quot;: 1 }, { &quot;source&quot;: 0, &quot;receiver&quot;: 2 }, { &quot;source&quot;: 3, &quot;receiver&quot;: 0 }, { &quot;source&quot;: 4, &quot;receiver&quot;: 3 } ], &quot;control_links&quot;: [ ]} 需要替换几个配置参数 YOUR_BLOG_FEED_URL 替换成 Blog RSS Feed 链接 YOUR_MASTODON_DOMAIN 替换成 Mastodon 账号所在 Instance 的域名 比如 mstdn.jp YOUR_MASTODON_TOKEN 替换成 Mastodon 首选项&gt;开发&gt;你的应用 下创建的应用的 token 。 请千万保密，不要分享出去了 YOUR_TELEGRAPH_TOKEN 这里用了发送 Webmention 的服务 https://telegraph.p3k.io/ 搭建好Blog之后用 Blog 的 url 就可以注册。注册成功之后就能得到一个 token 本地环境不需要对外提供服务，所以在本地跑也是可以的，上 docker Heroku提供了一键部署，但是有很多影响使用的限制，见Huginn官方文档的 Deploy to Heroku。主要问题点在： 1天的总运行时间不能超过18小时，所以要定时休眠 需要定期 ping 一下，否则就偷懒了 数据库上限10000，所以不能保留太多日志 512MB 还是太勉强，超额使用可能会停止工作 虽然勉强可用，但是吧…… 比起处理这些细节学会用 docker 灵活多了啊，个人用的也没有对负载均衡之类有要求，稳定提供服务的意义见仁见智 VPS一月5美元左右的 VPS 能干不少，用 docker 跑能省心很多。装上 portainer ，做成模板之后还能分享 路由器/盒子/ NAS比如 N1，刷 OpenWrt 或者小钢炮固件， 同样可以用 portainer 降低使用门槛群晖之类的本身体验就足够好，干这类事绰绰有余 TG Bot//TODO 参考资料 GitHub+Hexo 搭建个人网站详细教程 Lofter2Hexo Pro Git 自动化工具Huginn入门指南 Heroku 安装 Huginn","link":"/hexo-icarus-showcase/2021/02/03/blog-mastodon-bot/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/hexo-icarus-showcase/2021/02/03/hello-world/"},{"title":"Hexo整合Matataki用Fan票打赏Blog文章","text":"修改记录 2020-12-14 初稿 2020-12-15 修改方案，支持在目录页打赏 概述在文章之后留下打赏地址/链接/二维码已经是一种很主流的激励创作者的形式了，Matataki的主站也支持用Fan票进行打赏。那么在站外我们能否用上Fan票呢？答案是肯定的。 如果已经有MetaMask这样的钱包，可以使用Fan票折跃门，把托管在平台上的Fan票转到我们自己的钱包，这样Blog上只要留下钱包地址即可转账打赏。 使用钱包仍然有些门槛，本文介绍了一种方法，可以当作站外使用Fan票场景的简单补充。这篇文章的成果很大程度上是基于 的研究： 使用的样例工程也是上文中提到的https://github.com/nekomeowww/hexo-plugin-matataki-example这个方法工作量不大，只要做脚本集成就可以了，相对地，对Matataki的主站有依赖。 步骤 和FanLocker一样，我们在_config.yml里做好配置： 12matataki: userId: 4382 一般情况下整个Blog的文章都是自己的，打赏对象都是同一个人，所以不需要每篇文章分开来配置。这个userId可以在Matataki的个人主页看到，比如 https://www.matataki.io/user/4382 新建文件themes/landscape/layout/matataki.ejs，为Blog目录和每篇文章增加脚本片段 12345678910111213&lt;script&gt; var mttk = { userId: '&lt;%- config.matataki.userId %&gt;', open: function (href) { window.open(href, 'hexo-mttk', 'width=445,height=700,resizable=no,menubar=no,status=no,scrollbars=yes'); }, openUserHome: function () { let href = 'https://matataki.io/user/' + mttk.userId; mttk.open(href); } };&lt;/script&gt; 然后在themes/landscape/layout/_partial/header.ejs里添加引用 1234&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;%- partial('matataki') %&gt; 这样就在每个页面都声明了mttk对象 在博客的分享脚本里增加打开Matataki的链接。这个主题是在themes/landscape/source/js/script.js。找到Share部分，增加动态html脚本 123456789101112131415161718// Share $('body').on('click', function(){ // ... var html = [ '&lt;div id=&quot;' + id + '&quot; class=&quot;article-share-box&quot;&gt;', '&lt;input class=&quot;article-share-input&quot; value=&quot;' + url + '&quot;&gt;', '&lt;div class=&quot;article-share-links&quot;&gt;', '&lt;a href=&quot;https://twitter.com/intent/tweet?url=' + encodedUrl + '&quot; class=&quot;article-share-twitter&quot; target=&quot;_blank&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;', '&lt;a href=&quot;https://www.facebook.com/sharer.php?u=' + encodedUrl + '&quot; class=&quot;article-share-facebook&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;', '&lt;a href=&quot;http://pinterest.com/pin/create/button/?url=' + encodedUrl + '&quot; class=&quot;article-share-pinterest&quot; target=&quot;_blank&quot; title=&quot;Pinterest&quot;&gt;&lt;/a&gt;', '&lt;a href=&quot;javascript:mttk.openUserHome()&quot; class=&quot;article-share-matataki&quot; title=&quot;Matataki&quot;&gt;&lt;/a&gt;', '&lt;/div&gt;', '&lt;/div&gt;' ].join(''); //...}); 就是 '&lt;a href=&quot;javascript:mttk.openUserHome()&quot; class=&quot;article-share-matataki&quot; title=&quot;Matataki&quot;&gt;&lt;/a&gt;',这句了。因为现在Matataki还不支持带入分享链接，先这样没有入参也是可以的 为了article-share-matataki这个样式，我们再调整一下css 打开themes/landscape/source/css/_partial/article.styl,增加如下样式： 1234567.article-share-matataki @extend $article-share-link &amp;:before content: &quot;\\f087&quot; &amp;:hover background: color-google text-shadow: 0 1px darken(color-google, 20%) content这里是字体图标，可以去http://www.fontawesome.com.cn/faicons/找个自己喜欢的，比如：http://www.fontawesome.com.cn/icons/thumbs-o-up/,把里面的Unicode填到content:后就可以了，注意要加一个反斜杠 \\ 5.看看效果 这个点赞图标就是我们加上的打开Matataki页面的链接了。点击之后会弹出窗口，打开博主在Matataki的个人主页，也就是上面配置的userId 因为实际就是主站点，登录和转账的方式都是一样的 留言可以留博客链接 链接体验地址 结语这样一些希望能有完整的文章管理权而自建博客的用户也可以接入Fan票生态了。这种方案的中心化程度比较高，不过个人认为先小规模使用Fan票，熟悉之后再用【Fan票迁跃门】体验更进一步的去中心化也有其意义所在。 另一方面算是对Matataki和Fan票的关系的一种确认。这篇文章涉及到的应用场景和“在Matataki平台上写文章”没什么关系，只涉及到了Fan票相关的部分。也就是说这个基于Fan票打赏的博客也是Fan票宇宙的一部分，但和Matataki更像邻居（相当大程度是账号权限系统没分离，所以体感上都在Matataki的域名和页面的缘故） 理论上可以做到在web3层面开发直接对接Fan票的dAPP来为博客构建打赏方案，不过现在文档和工具都不完善，门槛还是过高了些，期待Matataki进一步发展后这方面能有所改善","link":"/hexo-icarus-showcase/2020/12/14/hexo-matataki-reward-example/"},{"title":"likey-memo","text":"Arweave^1 生态的 爱发电^2 链接创作者和粉丝 基本构成 Likey Contract^3 : 智能合约部分。用 SmartWeave 编写 Likey Contract (main data) Likey PST[^4] Contract for Creator (creator data) 初步评估可以说是纯 Arweave 生态的产物，从媒体到锁到代币到智能合约 [^4]: Profit-Sharing Tokens, or PSTs, are a new incentivization mechanism for the open web that allow developers to earn a stream of micro-dividends for the duration their application is used. https://arweave.medium.com/profit-sharing-tokens-a-new-incentivization-mechanism-for-an-open-web-1f2532411d6e","link":"/hexo-icarus-showcase/2021/04/07/likey-memo/"},{"title":"Fediverse生态应用","text":"Microblog Pictures Music Videos Writing Mastodon is an open source decentralized social network - by the people for the people. Join the federation and take back control of your social media! Pixelfed is an activitypub based image sharing platform. Funkwhale is a community-driven project that lets you listen and share music and audio within a decentralized, open network. PeerTube developed by Framasoft, is the free and decentralized alternative to video platforms, providing you over 400,000 videos published by 60,000 users and viewed over 15 million times. WriteFreely is free and open source software for easily publishing writing on the web. Use it to start a personal blog — or an entire community. .content .tabs ul { margin: 0; } .tab-content { display: none; } var bulmaDemo = { onTabClick : function (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active'); } }; 参考： 活用 Bulma 美化 Icarus 文章","link":"/hexo-icarus-showcase/2021/01/06/bulma-demo/"},{"title":"Hodlock","text":"","link":"/hexo-icarus-showcase/2021/06/23/hodlock-demo/"},{"title":"对Matataki架构的一些思考","text":"安全 对 https://github.com/Matataki-io/Matataki-FE/issues/997 的回应 accessToken 如果放在非HttpOnly的Cookie里，脚本注入成功的话基本=拿到Token的值了。API Server 和 Matataki-FE 并不在同一个domain下，Matataki-FE需要通过Header传递accessToken。如果是Android或是iOS这样的应用，那么找个相对安全的地方放置Token还是相对容易的，但是浏览器端都不好办，有的单页应用是直接放在被闭包保护的state里的，浏览器重新加载页面的话就重新登入。而要在有页面切换的应用使用，解决方案基本只会是Cookie，换成LocalStorage之类的地方只会更不保险。 大部分只是在开发层面上前端后端分离的，最后部署的时候还是会放在一个域下，站点前端控制器和API前端控制器分开来管理，前者做CSRF Token配合HttpOnly Secure Cookie传递SESSIONID或者JWT，后者用OAuth2，也更倾向和有后端的应用对接（不泄露ClientSecret)，走authorization-code模式，安全性相对更高。 现在Matataki主站使用的基本是把两者当作一体对待的一般login，不过API Server Domain不同导致CSRF Token+HttpOnly Secure Cookie模式没法使用了。 而Developer平台提供的对接形式应该算是implicit模式的变种，应该是考虑到对接的APP不少是无后端的。 一般的APP用短期的JWT放在可被读到的Cookie里也还好，理由也是攻击的时间窗口并没有那么长，影响多少可控，而当前API涉及范围还挺大的，除了平台文章相关功能还包括Fan票部分，这里关系到用户的核心资产，如果授权了Fan票操作权限看来没有额度授权之类的，非常敏感了。 目前想到的主要改造思路： 权限进一步细化，授予Fan票相关权限的时候加上额度限制，并控制JWT的有效时长 涉及到转账、支付相关的API需要二次认证，可以有小额免密类的提升体验 这两个不调整架构也能做，要注意的细节会比较多，有API列表的话应该是针对特定API加强认证 对Matataki主站的改造可以考虑在matataki.io域名上搭一层薄的API转发网关，主站走这个API，accessToken放在主站的HttpOnly Secure Cookie里，在网关转发的时候把Token放到Header里提交给API Server Developer那边也建议支持authorization-code，让第三方服务的后端也能用上HttpOnly Secure Cookie，现在的API Server模式在Server to Server的交互中使用。现在的模式在静态Blog这种无后端的场景还是很有用，不过一个不注意是真的有可能从脚本泄露的。 如果Login Success在API Server的Domain下写HttpOnly Secure Cookie，API的调用根据条件检查Cookie和Header会如何呢？没有其他后端的纯Client App/DAPP也没必要取这个Cookie里的JWT传给其他服务端，不能用JS读出来不是问题，有必要和其他后端交互的应用可以改造成authorization-code模式，在使用上似乎有优势。问题在于一次登入就能在多个使用API的Client App应该是通用，会造成CSRF。即使根据申请的App来维护Cross-Origin清单，恶意站点如果去事先申请App，恐怕是没有那个精力去一个个审查的。这类跨站授权本来也是靠用户自己判断Client App是否值得信任，毕竟用户自己点授权的么。但是用户信任A站点生成的Token如果能被拿到B去使用性质就不一样了 如果是靠API返回值记录一个accessToken（和现在一样），再额外加一个HttpOnly Secure Cookie呢？即使accessToken通过脚本泄露了，没有Cookie请求也无法通过；即使在网站A请求到了Cookie，用户被某种方式引导带着Cookie访问危险站点B，没有accessToken也不行；这样攻击就要再网站A构造脚本注入，读到accessToken后引导到危险站点B，两个都全了。那么签发accessToken的时候限定使用域，在B用这个accessToken请求会发现这个accessToken只能在站点A使用，也能拦截下来； 直接在Cookie里带上授权域信息也行，如果用同一个KEY，体验上会变成在其中一个App登入，另一个会被下线，从安全来说倒也不是问题；如果不同的clientId写进不同的KEY里，accessToken里带上clientId，根据不同的clientId去检查不同的Cookie，应该能做到并存 这种模式下，API Server检查accessToken的逻辑是这样的： 判断API Endpoint是否需要accessToken才能访问，如果是没带accessToken，accessToken签名无法验证，accessToken过期等，拒绝 判断这个请求是不是带的accessToken是不是签发给谁的2-A. 是签发给某个服务端（可以包括matataki.io）的，如果是泄露的也说明服务端没尽到保管好accessToken的责任；不过还是可以通过检查请求头，请求IP等形式做进一步的安全判断，比如明显是通过浏览器发起的请求可以直接拒绝掉，不符合预设的使用场景；如果没有其他问题就判定通过2-B. 不是，是签发给浏览器前端使用的，判断是否有带上HttpOnly Secure Cookie（可以根据clientId检查不同的Cookie),如果有而且有效（格式也是一种JWT，不过内容和accessToken不同)，那么通过，如果没有，拒绝2-C. 是签发给某个Mobile App的，按最普通的accessToken处理就可以了 PKCE解决的应该是clientSecret暴露在外的问题，本来也是Mobile App没有合适的放clientSecret位置的解决方案 https://www.oauth.com/playground/authorization-code-with-pkce.html 对SPA来说每重开一次都重新登录一次也不算不可接受了，涉及到币的话说不定反而是安全的证明如果要更长时间保持，还是需要参考上面那种带些定制的手段了 有一些参考文章，可能有帮助： https://wso2.com/library/articles/a-primer-on-oauth-2-0-for-client-side-applications-part-3/ https://developer.okta.com/blog/2019/05/01/is-the-oauth-implicit-flow-dead MatatakiAuth的JWT验证问题 当前是直接取JWT的payload解析回json使用的，没有验证签名。通过userId+eth address等可以构造出这样的报文，有可能伪造身份。邮箱或者钱包地址在文章列表的author里是明文userId在首页的url里就可以确认。应该用签发JWT的KEY验证签名，为了减少KEY的扩散可以是生成JWT签名部分用privateKey，各个APP用publicKey验签","link":"/hexo-icarus-showcase/2021/01/08/matataki-auth/"},{"title":"Matataki-Quest","text":"Password: aYUPJrSrwKAliOkCjmNLlRw9j4K7Ux6sGo: https://quest.matataki.io/","link":"/hexo-icarus-showcase/2021/02/03/matataki-quest/"},{"title":"开放式社交媒体个人备忘","text":"https://fediverse.party 个人站点WordPress使用人数足够多，两边的插件都有，”千客“就是基于这个方案做的。在Blog方面应该非常强，有技术支持的情况下可扩展性也会很高。 microblog.pubhttps://docs.microblog.pub/ 相比Mastodon或许更适合个站？ 单用户 AcitivityPub和IndieWeb的双向支持 Dolphin轻量级的，适合个人使用的。前端型技术栈 , 二次开发门槛相对来说是比较低吧 IndieWeb + Fediverse桥很多都是 Ryan Barrett 的作品 能转换各种社交网络间的数据。举例：可以把IndieWeb站点上的数据发布到Mastodon上 Bridgyhttps://brid.gy/ Granaryhttps://granary.io/ https://github.com/snarfed/granary 转换数据格式，让支持各种协议的平台成为数据源 以API形式提供的，公开数据作为管道通过这类服务也还是可以的。最好有其他备选项。","link":"/hexo-icarus-showcase/2021/02/03/open-social-media-memo/"},{"title":"NFT 嵌入示例1","text":"测试 NFTE 嵌入 NFT 的效果。注意脚本和容器要紧挨着。这里展现的是 Zora 的 NFT","link":"/hexo-icarus-showcase/2021/04/13/nfte-demo/"},{"title":"回复《webmention 实现参考》","text":"webmention 实现参考几年前的探索被搜到总结了这么好的文章，感觉挺惊喜的。如果是用 webmention.io 的服务的话，订阅其 RSS Feed 接受 Webmention 提醒这个实践看来确实还是能工作的，配合 FreshRSS 等服务可做到多端同步。Feed 突然有提示也算惊喜了。","link":"/hexo-icarus-showcase/2023/03/31/reply-to-ryen-xiang-20230331/"},{"title":"回复《Shoka:+Webmention》","text":"感谢 Shoka:+Webmention 的提及。其实周日就在 RSS Fead Reader 里确认到这个消息了，忙于其他事第三天才回复。webmention 能自动发送在改善使用体验上是必要的，之前尝试和 Mastodon 整合的时候用了 Huginn， 订阅 Feed 然后发到 Mastodon 和 Webmention API 的方式。不过 Huginn 失修之后这个流程就坏掉了，记得是跑着跑着把 VPS 拉挂了，当时也没太在意就先关了再说。 逐渐开始有 webmention 往来的话还是打算抽空恢复起来。https://www.webmention.app/ 里基本概括了能用的方案和取舍。不太想用 IFTTT 而是继续这些，果然还是看有没开源是否可以自部署吧。虽然懒癌发作的话自己没好好维护服务就会导致服务质量根本比不上用那些别人部署的，从这个角度说用稳定的镜像+容器服务也是个路子。 立个 Flag 抽个时间把这个站配个自定义域名，也不带 path，更符合 IndieWeb 相关实践， 更好地使用相关服务，比如 https://fed.brid.gy/","link":"/hexo-icarus-showcase/2023/04/19/reply-to-mirakelor-20230419/"},{"title":"社交代币 800","text":"备忘对 Fan 票的想法初期建议DAPP 形态的卡片盒笔记法实践，以及在这个基建之上的内容生产消费体系。相对于具有比较完整体系的文章，卡片这个粒度更细碎，内容生产的阻抗会更小，也适合像 [Drafts] (https://getdrafts.com) 这样的终端快速的思维捕捉。 草稿通过采集、过滤、编辑、润色等过程后形成更高质量的卡片，汇入可流通、分发、复制、演绎、链接、分叉的海洋。这种情况下卡片之间的双向链接，多个链接形成的提纲、思维导图应该也是一种内容的创作了，再借助一些多媒体挂件，加上合适的模板引擎，卡片链接的图状元数据可以比较容易地渲染出一篇完整的、可读的、排版良好的文章。 基于同一片卡片之海，从不同的视点、做不同的取舍、演绎也能得出大相径庭的成品，甚至都能做到逻辑自洽。借由对这些内容的同时观测，或许能得到更立体的视角吧。这也是对某些wiki页的修改大战、某些论坛“冲水”，某些“覆盖”来争夺对“仅有一个的真实”的话语权的感慨。这种范式下卡片的生产者、链接者、过滤者、聚合者都可以是不同的人，应该也有办法在一定程度上做到各自的版权来保护各自思考的结晶；围绕中间产品和成品的引用、演绎、分叉、联合、竞争、合并、溯源、仲裁等等，感觉都有 Fan 票应用的点。像是提供一个信息生命体 / MEME 生命体 的演化环境，其成长性映射到其来源的 Token 的成长性上。从这个角度看电子宠物也好、手游网游的号和角色卡也好、甚至上溯到集换式卡片游戏都是有类似的性质。 对 Loopss 的想法人际关系之映射。 知识图谱之映射。 链上和链下网上和网下和更专业的“上链”服务比反而就是这样简易而通用的，在初期不需要付出太高成本 对 Social Token 可能形态的想法“三位一体” 令牌 + 货币 + 证券 是否是个不可能三角？ 注重不同的侧面，就会有不同的形态，相对地运营策略也不同 勋章完全去掉货币属性和证券属性，把令牌属性拉到极致，会变成什么样呢？ 打个比方把“奥运会金牌得主”这样的资质/成就奖牌 NFT 化，完全不流动是否还有社交性质呢？应该是有的。配合社交媒体，作为资质/身份/成就/能力的证明，仅仅是 show 出来就能对人脑产生作用。原因恐怕是 PoW 门槛非常高。 介绍信 -&gt; 通行证高信用实体铸造的签给特定对象的Token形态， 可能以拍卖的形式产生流动性。最符合“通行令牌”的原本含义。 门票依然是通行证性质的使用价值做底的，但是流动性可以拉到相当高。足够刚需的通行证会产生通货和证券属性。 付费墙应该可以算这个形态的衍生。 会员证门票一般是一次性的，会员证可以说是加上时间维度的通行证 商品可能的运营策略","link":"/hexo-icarus-showcase/2021/03/12/social-money-800/"},{"title":"Webmention Demo","text":"为本站加上Webmention支持，并尝试与其他自称支持webmention的服务交互。通过订阅webmention.io提供的RSS源，也能足够及时地收到提示，各种信息汇集到一个视图下，注意力可聚焦。 Fediverse发一个toot提及博文并发webmention，Blog上的脚本从中构造出用于交互的链接，包括操作栏和联邦宇宙入口。 比起把toot上下文集成进来作为评论区，目前还是更倾向把移步Fedivese讨论，因为可以让读者在自己的主场回复。 Comment 尝试做一个评论插件，把页面的webmention加载出来。 参考时间线模板 12345678&lt;div class=&quot;timeline&quot;&gt; &lt;article class=&quot;media&quot;&gt; &lt;div class=&quot;media-content&quot;&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; 参考KAIX.IN的Webmention区实现，对Fediverse入口做了特殊处理，增加了Emoji来加强语义 尝试Micro.blogMicro.blogs声称会把对博文的回复作为Webmention来对待 Hosted blogs on Micro.blog can also receive Webmentions from other sites outside of Micro.blog. If the site URL has been verified in a Micro.blog user’s profile, Micro.blog can also match the incoming Webmention with a Micro.blog user and use their username. If not, Micro.blog will create a special “domain name” user for the incoming Webmention. 测试结果是站外的webmention能发送成功，返回202，但是无法在Micro.blog内看到来自这里的Webmention。应该是接收了，但是不在Micro.blog体系内就难以用@xxx的形式展现出来，还是因为这个站的域名是二级域名，所以不被认可呢？看来还是“自成一格”的 独立BlogRe:Linked能找到基于相同的理由在做相同的事的博客，还是很欣慰的。 2021-02-02 在页面里没有找到webmention相关link，也许是出于某些考虑暂时撤下了？ 2021-02-03 在Fediverse里联系上，webmention成功！ KAIX.IN从上文溯源就会找到这位的Blog。 真是一位了不起的咖啡师。 测试结果，返回201了，看来是发送成功了呢。 在对方页面上看到链接了，评论区实现方式好精巧，值得参考。 参考社区入口链接的处理方式，对关联到Mastodon的webmention做特殊处理吧。","link":"/hexo-icarus-showcase/2021/02/02/webmention-demo/"}],"tags":[{"name":"瞬Matataki","slug":"瞬Matataki","link":"/hexo-icarus-showcase/tags/%E7%9E%ACMatataki/"},{"name":"Fan票","slug":"Fan票","link":"/hexo-icarus-showcase/tags/Fan%E7%A5%A8/"},{"name":"mastodon","slug":"mastodon","link":"/hexo-icarus-showcase/tags/mastodon/"},{"name":"webmention","slug":"webmention","link":"/hexo-icarus-showcase/tags/webmention/"},{"name":"quote","slug":"quote","link":"/hexo-icarus-showcase/tags/quote/"},{"name":"APlayer","slug":"APlayer","link":"/hexo-icarus-showcase/tags/APlayer/"},{"name":"IPFS","slug":"IPFS","link":"/hexo-icarus-showcase/tags/IPFS/"},{"name":"Hexo","slug":"Hexo","link":"/hexo-icarus-showcase/tags/Hexo/"},{"name":"创作者经济","slug":"创作者经济","link":"/hexo-icarus-showcase/tags/%E5%88%9B%E4%BD%9C%E8%80%85%E7%BB%8F%E6%B5%8E/"},{"name":"Bulma","slug":"Bulma","link":"/hexo-icarus-showcase/tags/Bulma/"},{"name":"Icarus","slug":"Icarus","link":"/hexo-icarus-showcase/tags/Icarus/"},{"name":"Fediverse","slug":"Fediverse","link":"/hexo-icarus-showcase/tags/Fediverse/"},{"name":"Hodlock","slug":"Hodlock","link":"/hexo-icarus-showcase/tags/Hodlock/"},{"name":"IndieWeb","slug":"IndieWeb","link":"/hexo-icarus-showcase/tags/IndieWeb/"},{"name":"demo","slug":"demo","link":"/hexo-icarus-showcase/tags/demo/"}],"categories":[{"name":"demo","slug":"demo","link":"/hexo-icarus-showcase/categories/demo/"},{"name":"交流","slug":"交流","link":"/hexo-icarus-showcase/categories/%E4%BA%A4%E6%B5%81/"},{"name":"explore","slug":"explore","link":"/hexo-icarus-showcase/categories/explore/"}]}